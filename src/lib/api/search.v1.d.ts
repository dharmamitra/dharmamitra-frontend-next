/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/parallel": {
    /** Search Endpoint Parallel */
    post: operations["search_endpoint_parallel_parallel_post"]
  }
  "/primary": {
    /** Search Endpoint Primary */
    post: operations["search_endpoint_primary_primary_post"]
  }
  "/secondary": {
    /** Search Endpoint Secondary */
    post: operations["search_endpoint_secondary_secondary_post"]
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** Body_search_endpoint_parallel_parallel_post */
    Body_search_endpoint_parallel_parallel_post: {
      /** Search Input */
      search_input: string
      input_encoding: components["schemas"]["InputEncoding"]
      search_type: components["schemas"]["SearchType"]
      filter_source_language: components["schemas"]["FilterLanguage"]
      filter_source_data: components["schemas"]["FilterPrimary"]
      postprocess_model: components["schemas"]["PostProcessModel"]
    }
    /** Body_search_endpoint_primary_primary_post */
    Body_search_endpoint_primary_primary_post: {
      /** Search Input */
      search_input: string
      input_encoding: components["schemas"]["InputEncoding"]
      search_type: components["schemas"]["SearchType"]
      filter_language: components["schemas"]["FilterLanguage"]
      filter_primary: components["schemas"]["FilterPrimary"]
      postprocess_model: components["schemas"]["PostProcessModel"]
    }
    /** Body_search_endpoint_secondary_secondary_post */
    Body_search_endpoint_secondary_secondary_post: {
      /** Search Input */
      search_input: string
      input_encoding: components["schemas"]["InputEncoding"]
      search_type: components["schemas"]["SearchType"]
      filter_secondary: components["schemas"]["FilterSecondary"]
      postprocess_model: components["schemas"]["PostProcessModel"]
    }
    /**
     * FilterLanguage
     * @description For primary and parallel data, we can filter by these languages.
     * @enum {string}
     */
    FilterLanguage: "tibetan" | "sanskrit" | "buddhist-chinese" | "pali" | "all"
    /**
     * FilterPrimary
     * @description Limits for Search in primary sources. This is identical to the filter model of the xnexus endpoints.
     */
    FilterPrimary: {
      /**
       * Category Include
       * @default []
       */
      category_include?: unknown[]
      /**
       * Category Exclude
       * @default []
       */
      category_exclude?: unknown[]
      /**
       * File Include
       * @default []
       */
      file_include?: unknown[]
      /**
       * File Exclude
       * @default []
       */
      file_exclude?: unknown[]
    }
    /**
     * FilterSecondary
     * @description Limits for Search in secondary sources
     * @enum {string}
     */
    FilterSecondary: ""
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /**
     * InputEncoding
     * @enum {string}
     */
    InputEncoding: "auto" | "tibetan" | "wylie" | "dev" | "iast" | "hk"
    /**
     * ParallelDataSearchResponse
     * @description List of individual search results for the parallel search.
     */
    ParallelDataSearchResponse: {
      /** Results */
      results: components["schemas"]["ParallelDataSearchResult"][]
    }
    /**
     * ParallelDataSearchResult
     * @description A single result from the parallel data search.
     */
    ParallelDataSearchResult: {
      /** Src Lang */
      src_lang: string
      /** Src Segmentnr */
      src_segmentnr: string
      /** Src Title */
      src_title: string
      /** Src Link */
      src_link: string
      src_text: components["schemas"]["TextSegment"]
      /** Tgt Lang */
      tgt_lang: string
      /** Tgt Segmentnr */
      tgt_segmentnr: string
      /** Tgt Title */
      tgt_title: string
      tgt_text: components["schemas"]["TextSegment"]
      /** Tgt Link */
      tgt_link: string
    }
    /**
     * PostProcessModel
     * @description If we do full RAG, we might want to postprocess the results with any of these models.
     * @enum {string}
     */
    PostProcessModel: "llama3" | "gpt-3.5" | "gpt-4" | "claude" | "none"
    /** PrimarySearchResponse */
    PrimarySearchResponse: {
      /** Results */
      results: components["schemas"]["PrimarySearchResult"][]
    }
    /** PrimarySearchResult */
    PrimarySearchResult: {
      /** Lang */
      lang: string
      /** Segmentnr */
      segmentnr: string
      /** Title */
      title: string
      /** Summary */
      summary: string
      /** Text */
      text: string
      /** Src Link */
      src_link: string
    }
    /**
     * SearchType
     * @description The type of search to be performed, regular here means a standard elastic search that is more or less precise, while semantic uses a semantic model with english as pivot language.
     * @enum {string}
     */
    SearchType: "regular" | "semantic"
    /** SecondarySearchResponse */
    SecondarySearchResponse: {
      /** Results */
      results: components["schemas"]["SecondarySearchResult"][]
    }
    /** SecondarySearchResult */
    SecondarySearchResult: {
      /** Title */
      title: string
      /** Author */
      author: string
      /** Year */
      year: string
      /** Page Link */
      page_link: string
      /** Summary */
      summary: string
      /** Text */
      text: string
    }
    /**
     * TextSegment
     * @description We return text-Before and text_after as well to give context to the search results.
     */
    TextSegment: {
      /** Text Before */
      text_before: string
      /** Text Main */
      text_main: string
      /** Text After */
      text_after: string
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Search Endpoint Parallel */
  search_endpoint_parallel_parallel_post: {
    parameters: {
      query?: {
        filter_target_language?: components["schemas"]["FilterLanguage"] | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_search_endpoint_parallel_parallel_post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ParallelDataSearchResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Search Endpoint Primary */
  search_endpoint_primary_primary_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_search_endpoint_primary_primary_post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PrimarySearchResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Search Endpoint Secondary */
  search_endpoint_secondary_secondary_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_search_endpoint_secondary_secondary_post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecondarySearchResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
}
