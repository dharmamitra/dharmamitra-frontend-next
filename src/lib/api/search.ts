/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/parallel/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Search Endpoint Parallel */
    post: operations["search_endpoint_parallel_parallel__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/primary/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Search Endpoint Primary */
    post: operations["search_endpoint_primary_primary__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/secondary/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Search Endpoint Secondary */
    post: operations["search_endpoint_secondary_secondary__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/summary/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Summary Endpoint */
    post: operations["summary_endpoint_summary__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/explanation/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Summary Endpoint No Stream */
    post: operations["summary_endpoint_no_stream_explanation__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/explanation-parallel/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Summary Endpoint Parallel */
    post: operations["summary_endpoint_parallel_explanation_parallel__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Endpoint */
    post: operations["knn_translate_endpoint_knn_translate__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-no-stream/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Endpoint No Stream */
    post: operations["knn_translate_endpoint_no_stream_knn_translate_no_stream__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-mitra/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Endpoint */
    post: operations["knn_translate_endpoint_knn_translate_mitra__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-mitra-no-stream/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Endpoint No Stream */
    post: operations["knn_translate_endpoint_no_stream_knn_translate_mitra_no_stream__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-gemini/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Gemini Endpoint */
    post: operations["knn_translate_gemini_endpoint_knn_translate_gemini__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-gemini-no-stream/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Gemini No Stream Endpoint */
    post: operations["knn_translate_gemini_no_stream_endpoint_knn_translate_gemini_no_stream__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-gemini-base/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Gemini Base Endpoint */
    post: operations["knn_translate_gemini_base_endpoint_knn_translate_gemini_base__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/knn-translate-gemini-pro/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Knn Translate Gemini Pro Endpoint */
    post: operations["knn_translate_gemini_pro_endpoint_knn_translate_gemini_pro__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/v1/chat/completions": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Chat Completions
     * @description This endpoint emulates the OpenAI /v1/chat/completions API.
     *     It supports streaming via SSE or normal single-response mode.
     */
    post: operations["chat_completions_v1_chat_completions_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/chat-translate/v1/chat/completions": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Chat Completions
     * @description This endpoint emulates the OpenAI /v1/chat/completions API.
     *     It supports streaming via SSE or normal single-response mode.
     */
    post: operations["chat_completions_chat_translate_v1_chat_completions_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/chat-translate/v1/chat/completions-v2": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Chat Completions
     * @description This endpoint emulates the OpenAI /v1/chat/completions API.
     *     It supports streaming via SSE or normal single-response mode.
     */
    post: operations["chat_completions_chat_translate_v1_chat_completions_v2_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/chat-summary/v1/chat/completions": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Chat Summary V2
     * @description This endpoint provides a summary using the ChatSummaryRequest type.
     *     It follows the OpenAI /v1/chat/completions format and supports streaming.
     *     This endpoint is designed for better type safety and automatic TypeScript generation.
     */
    post: operations["chat_summary_v2_chat_summary_v1_chat_completions_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/rate_translations": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Rate Translations
     * @description Endpoint to rate translations using a generative model.
     *     Expects a JSON payload with translation data.
     */
    post: operations["rate_translations_rate_translations_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/rate_translations_ref_free": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Rate Translations Ref Free
     * @description Endpoint to rate translations using a generative model without reference.
     *     Expects a JSON payload with translation data.
     */
    post: operations["rate_translations_ref_free_rate_translations_ref_free_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/ocr/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Ocr Endpoint */
    post: operations["ocr_endpoint_ocr__post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** Body_knn_translate_endpoint_knn_translate__post */
    Body_knn_translate_endpoint_knn_translate__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /**
       * Mode
       * @default fgs
       */
      mode: string
    }
    /** Body_knn_translate_endpoint_knn_translate_mitra__post */
    Body_knn_translate_endpoint_knn_translate_mitra__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /**
       * Mode
       * @default fgs
       */
      mode: string
      /**
       * Do Grammar
       * @default true
       */
      do_grammar: boolean
    }
    /** Body_knn_translate_endpoint_no_stream_knn_translate_mitra_no_stream__post */
    Body_knn_translate_endpoint_no_stream_knn_translate_mitra_no_stream__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /**
       * Mode
       * @default normal
       */
      mode: string
      /**
       * Do Grammar
       * @default true
       */
      do_grammar: boolean
    }
    /** Body_knn_translate_endpoint_no_stream_knn_translate_no_stream__post */
    Body_knn_translate_endpoint_no_stream_knn_translate_no_stream__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /**
       * Mode
       * @default normal
       */
      mode: string
    }
    /** Body_knn_translate_gemini_base_endpoint_knn_translate_gemini_base__post */
    Body_knn_translate_gemini_base_endpoint_knn_translate_gemini_base__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /** Password */
      password?: string
    }
    /** Body_knn_translate_gemini_endpoint_knn_translate_gemini__post */
    Body_knn_translate_gemini_endpoint_knn_translate_gemini__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /**
       * Do Grammar
       * @default true
       */
      do_grammar: boolean
      /**
       * Use Pro Model
       * @default false
       */
      use_pro_model: boolean
      /** Password */
      password: string
    }
    /** Body_knn_translate_gemini_no_stream_endpoint_knn_translate_gemini_no_stream__post */
    Body_knn_translate_gemini_no_stream_endpoint_knn_translate_gemini_no_stream__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /**
       * Do Grammar
       * @default false
       */
      do_grammar: boolean
      /**
       * Use Pro Model
       * @default false
       */
      use_pro_model: boolean
      /** Password */
      password: string
    }
    /** Body_knn_translate_gemini_pro_endpoint_knn_translate_gemini_pro__post */
    Body_knn_translate_gemini_pro_endpoint_knn_translate_gemini_pro__post: {
      /** Query */
      query: string
      /**
       * Language
       * @default english
       */
      language: string
      /** Password */
      password: string
    }
    /** Body_ocr_endpoint_ocr__post */
    Body_ocr_endpoint_ocr__post: {
      /**
       * File
       * Format: binary
       */
      file: string
    }
    /** Body_search_endpoint_secondary_secondary__post */
    Body_search_endpoint_secondary_secondary__post: {
      /** Search Input */
      search_input: string
      input_encoding: components["schemas"]["InputEncoding"]
      search_type: components["schemas"]["SearchType"]
      filter_secondary: components["schemas"]["LimitsSecondary"]
      postprocess_model: components["schemas"]["PostProcessModel"]
    }
    /** Body_summary_endpoint_no_stream_explanation__post */
    Body_summary_endpoint_no_stream_explanation__post: {
      /** Query */
      query: string
      /**
       * Locale
       * @default en
       */
      locale: string
      /** Summary */
      summary: string
    }
    /** Body_summary_endpoint_parallel_explanation_parallel__post */
    Body_summary_endpoint_parallel_explanation_parallel__post: {
      /** Query */
      query: string
      /** Src Text */
      src_text: string
      /** Tgt Text */
      tgt_text: string
      /** Src Translation */
      src_translation: string
      /** Tgt Translation */
      tgt_translation: string
      /**
       * Locale
       * @default en
       */
      locale: string
    }
    /** Body_summary_endpoint_summary__post */
    Body_summary_endpoint_summary__post: {
      /** Query */
      query: string
      /** Summary */
      summary: string
      /**
       * Locale
       * @default en
       */
      locale: string
    }
    /** ChatCompletionRequest */
    ChatCompletionRequest: {
      /** @default gpt-3.5-turbo */
      model: components["schemas"]["ModelType"] | null
      /** Messages */
      messages: {
        [key: string]: string
      }[]
      /**
       * Stream
       * @default false
       */
      stream: boolean | null
      /**
       * Temperature
       * @default 0.1
       */
      temperature: number | null
      /**
       * Do Grammar
       * @default false
       */
      do_grammar: boolean | null
      /** @default auto */
      input_encoding: components["schemas"]["InputEncoding"] | null
      /**
       * Target Lang
       * @default english
       */
      target_lang: string | null
    }
    /**
     * ChatSummaryRequest
     * @description Request model for the chat-summary endpoint.
     *     Takes a locale (target language) and PrimarySearchResult as children.
     */
    ChatSummaryRequest: {
      /** @default gpt-3.5-turbo */
      model: components["schemas"]["ModelType"] | null
      /**
       * Stream
       * @default true
       */
      stream: boolean | null
      /**
       * Temperature
       * @default 0.1
       */
      temperature: number | null
      /** Messages */
      messages?:
        | {
            [key: string]: string
          }[]
        | null
      /** Locale */
      locale: string
      search_result: components["schemas"]["PrimarySearchResult"]
    }
    /**
     * FilterLanguage
     * @description For primary and parallel data, we can filter by these languages.
     * @enum {string}
     */
    FilterLanguage: "bo" | "sa" | "zh" | "pa" | "all"
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /**
     * InputEncoding
     * @enum {string}
     */
    InputEncoding: "auto" | "tibetan" | "wylie" | "dev" | "iast" | "hk"
    /**
     * LimitsSecondary
     * @description Limits for Search in secondary sources
     * @enum {string}
     */
    LimitsSecondary: "" | "" | ""
    /**
     * ModelType
     * @enum {string}
     */
    ModelType: "gpt-3.5-turbo" | "default" | "mitra-base" | "mitra-pro"
    /**
     * ParallelDataSearchResponse
     * @description List of individual search results for the parallel search.
     */
    ParallelDataSearchResponse: {
      /** Results */
      results: components["schemas"]["ParallelDataSearchResult"][]
    }
    /**
     * ParallelDataSearchResult
     * @description A single result from the parallel data search.
     */
    ParallelDataSearchResult: {
      /** Query */
      query: string
      /** Src Lang */
      src_lang: string
      /** Src Segmentnr */
      src_segmentnr: string
      /** Src Title */
      src_title: string
      /** Src Link */
      src_link: string
      src_text: components["schemas"]["TextSegment"]
      /** Tgt Lang */
      tgt_lang: string
      /** Tgt Segmentnr */
      tgt_segmentnr: string
      /** Tgt Title */
      tgt_title: string
      tgt_text: components["schemas"]["TextSegment"]
      /** Tgt Link */
      tgt_link: string
    }
    /**
     * PostProcessModel
     * @description If we do full RAG, we might want to postprocess the results with any of these models.
     * @enum {string}
     */
    PostProcessModel: "llama3" | "gpt-3.5" | "gpt-4" | "claude" | "none"
    /** PrimarySearchResponse */
    PrimarySearchResponse: {
      /** Results */
      results: components["schemas"]["PrimarySearchResult"][]
    }
    /** PrimarySearchResult */
    PrimarySearchResult: {
      /** Query */
      query: string
      /** Lang */
      lang: string
      /** Segmentnr */
      segmentnr: string
      /** Title */
      title: string
      /** Summary */
      summary: string
      /** Text */
      text: string
      text_new: components["schemas"]["TextSegment"]
      /** Src Link */
      src_link: string
      /** Vector */
      vector?: number[] | null
    }
    /** SearchRequest */
    SearchRequest: {
      /** Search Input */
      search_input: string
      /** @default auto */
      input_encoding: components["schemas"]["InputEncoding"]
      /** @default semantic */
      search_type: components["schemas"]["SearchType"]
      /** @default all */
      filter_source_language: components["schemas"]["FilterLanguage"]
      /** @default all */
      filter_target_language: components["schemas"]["FilterLanguage"]
      source_filters?: components["schemas"]["SourceFilters"] | null
      /**
       * Do Ranking
       * @default true
       */
      do_ranking: boolean
      /**
       * Max Depth
       * @default 200
       */
      max_depth: number
    }
    /**
     * SearchType
     * @description The type of search to be performed, regular here means a standard elastic search that is more or less precise, while semantic uses a semantic model with english as pivot language.
     * @enum {string}
     */
    SearchType: "regular" | "semantic"
    /** SecondarySearchResponse */
    SecondarySearchResponse: {
      /** Results */
      results: components["schemas"]["SecondarySearchResult"][]
    }
    /** SecondarySearchResult */
    SecondarySearchResult: {
      /** Title */
      title: string
      /** Author */
      author: string
      /** Year */
      year: string
      /** Page Link */
      page_link: string
      /** Summary */
      summary: string
      /** Text */
      text: string
    }
    /** SourceFilters */
    SourceFilters: {
      /**
       * Include Files
       * @default []
       */
      include_files: string[] | null
      /**
       * Include Categories
       * @default []
       */
      include_categories: string[] | null
      /**
       * Include Collections
       * @default []
       */
      include_collections: string[] | null
    }
    /** SummaryRespone */
    SummaryRespone: {
      /** Summary */
      summary: string
      /**
       * Relevance
       * @enum {string}
       */
      relevance: "low" | "medium" | "high"
    }
    /**
     * TextSegment
     * @description We return text-Before and text_after as well to give context to the search results.
     */
    TextSegment: {
      /** Text Before */
      text_before: string
      /** Text Main */
      text_main: string
      /** Text After */
      text_after: string
      /** Translation */
      translation: string
    }
    /** TranslationData */
    TranslationData: {
      /** Original */
      original: string
      /** Reference */
      reference: string
      /** Prediction */
      prediction: string
    }
    /** TranslationDataRefFree */
    TranslationDataRefFree: {
      /** Original */
      original: string
      /** Prediction */
      prediction: string
    }
    /** TranslationResponse */
    TranslationResponse: {
      /** Translation */
      translation: string
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  search_endpoint_parallel_parallel__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchRequest"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ParallelDataSearchResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  search_endpoint_primary_primary__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchRequest"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PrimarySearchResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  search_endpoint_secondary_secondary__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_search_endpoint_secondary_secondary__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SecondarySearchResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  summary_endpoint_summary__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_summary_endpoint_summary__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  summary_endpoint_no_stream_explanation__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_summary_endpoint_no_stream_explanation__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SummaryRespone"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  summary_endpoint_parallel_explanation_parallel__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_summary_endpoint_parallel_explanation_parallel__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SummaryRespone"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_endpoint_knn_translate__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_endpoint_knn_translate__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_endpoint_no_stream_knn_translate_no_stream__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_endpoint_no_stream_knn_translate_no_stream__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_endpoint_knn_translate_mitra__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_endpoint_knn_translate_mitra__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_endpoint_no_stream_knn_translate_mitra_no_stream__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_endpoint_no_stream_knn_translate_mitra_no_stream__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TranslationResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_gemini_endpoint_knn_translate_gemini__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_gemini_endpoint_knn_translate_gemini__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_gemini_no_stream_endpoint_knn_translate_gemini_no_stream__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_gemini_no_stream_endpoint_knn_translate_gemini_no_stream__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TranslationResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_gemini_base_endpoint_knn_translate_gemini_base__post: {
    parameters: {
      query?: never
      header?: {
        "x-dm-key"?: string
        origin?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_gemini_base_endpoint_knn_translate_gemini_base__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  knn_translate_gemini_pro_endpoint_knn_translate_gemini_pro__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_knn_translate_gemini_pro_endpoint_knn_translate_gemini_pro__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  chat_completions_v1_chat_completions_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  chat_completions_chat_translate_v1_chat_completions_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatCompletionRequest"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  chat_completions_chat_translate_v1_chat_completions_v2_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatCompletionRequest"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  chat_summary_v2_chat_summary_v1_chat_completions_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatSummaryRequest"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  rate_translations_rate_translations_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationData"][]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": number[]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  rate_translations_ref_free_rate_translations_ref_free_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationDataRefFree"][]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": number[]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  ocr_endpoint_ocr__post: {
    parameters: {
      query?: {
        transliterate_devanagari_to_iast?: boolean
        transliterate_tibetan_to_wylie?: boolean
        instruction?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_ocr_endpoint_ocr__post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
}
