name: Build Variants
on:
  workflow_dispatch:
    inputs:
      build_pub:
        description: "Build pub variant"
        required: true
        default: true
        type: boolean
      build_lab:
        description: "Build lab variant"
        required: true
        default: true
        type: boolean
      build_rnd:
        description: "Build rnd variant"
        required: true
        default: false
        type: boolean
jobs:
  #  The GHA matrix context isn't recognized in job-level if conditions
  #  so we need to prepare the matrix first
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Create an array of variants to build based on inputs
          variants="[]"
          if [[ "${{ github.event.inputs.build_pub }}" == "true" ]]; then
            variants=$(echo $variants | jq '. += ["pub"]')
          fi
          if [[ "${{ github.event.inputs.build_lab }}" == "true" ]]; then
            variants=$(echo $variants | jq '. += ["lab"]')
          fi
          if [[ "${{ github.event.inputs.build_rnd }}" == "true" ]]; then
            variants=$(echo $variants | jq '. += ["rnd"]')
          fi
          # Properly format the matrix JSON and escape it for GitHub Actions
          matrix_json=$(echo "{\"variant\":$variants}" | jq -c .)
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: actions-env
      - uses: actions/setup-node@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get current date
        id: timestamp
        run: echo "NOW=$(date +'%Y-%m-%d-%H%M')" >> "$GITHUB_OUTPUT"

      - name: Get short SHA
        id: short_sha
        run: echo "SHA=${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"

      - name: Set Sentry release version
        run: echo "SENTRY_RELEASE=${{ matrix.variant }}-${{ steps.short_sha.outputs.SHA }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DM_DH_USER }}
          password: ${{ secrets.DM_DH_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          build-args: |
            BUILD_VARIANT=${{ matrix.variant }}
            SENTRY_RELEASE=${{ env.SENTRY_RELEASE }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_ORG=${{ secrets.SENTRY_ORG }}
            SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          push: true
          tags: "${{ vars.DM_DH_USER }}/${{ vars.DM_DH_REPO }}:${{ matrix.variant }}-${{ steps.timestamp.outputs.NOW }}-${{ steps.short_sha.outputs.SHA }},${{ vars.DM_DH_USER }}/${{ vars.DM_DH_REPO }}:${{ matrix.variant }}-latest"

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ matrix.variant }}
          version: ${{ env.SENTRY_RELEASE }}
          finalize: true
          # No sourcemaps here - they're uploaded by the webpack plugin
